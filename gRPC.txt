- Protobufs
  - Data serialization
   - Language interop
   
   - Messages
      - Intuitive messeage definition
   - Services
      - API endpoints
      
 - gRPC uses Protobufs
    - smaller size
    - compressed
    - Less CPU intensive
    - Binary
    - faster & more efficient communication


- gRPC 
   - relies on HTTP2
   - code generation for APIs in supported languages
   
- HTTP1
  - One TCP connection per request
      - 100 images => open & close 100 TCP connections
  - Plaintext headers
      - No compression
  - more latency

- HTTP2
    - One TCP connection shared by multiple requests & responses
    - Server push
      - more data can be pushed without waiting
    - Multiplexing
        - multiple messages can be pushed in parallel over the same connection
    - Headers &  data are compressed
        - Less bandwidth is required
    - SSL connection is required by default
      
#------------------------------------------------------------------------------------      
      
 - Scalability
    - Server: Async
        - main thread is not blocked. Therefore, server can handle many reuqests in parallel
    - Client:
        - Free to choose between async & blocking

#------------------------------------------------------------------------------------      
        
 - Security (SSL)
    - Schema based serialization
        - binary
    - SSL encryption
    - Interceptors for Auth
    
    
#------------------------------------------------------------------------------------      
gRPC vs Rest

- gRPC
  - Protobuf
    - Strict schemas
  - HTTP 2
  - Also supports Streaming
  - Bi-directional
  - Free design

- REST
  - JSON
  - HTTP 1 ( can use HTTP2 now)
  - Unary only
  - client -> server model
  - CRUD APIs
